纯01背包：装满背包的最大价值是多少。一个物品只能用一次，背包从大到小遍历
分割等和子集：问能不能装满背包
dp[j] = max(dp[j], dp[j-weight(i)]+velue(i)]
dp[max] = max 就装满了
最后一块石头的重量：问背包最多能装多少
dp[j] = max(dp[j], dp[j-weight(i)]+velue(i)] 装多少
目标和：问装满背包有多少种方法
dp[j] += dp[j-weight(i)] 组合方法
一和零：问装满背包最多有多少种物品
dp[j] = max(dp[j], dp[j-weight(i)]+1]

完全背包：同一物品可以无限使用。背包从小到大遍历
零钱兑换2：组合问题，先遍历物品，再遍历背包；
组合总和5：排列问题，先遍历背包，再遍历物品（递推公式和组合问题一样）
零钱兑换：求背包最少装多少种物品，用min。初始化dp[0]=0，其它=float('inf'),dp[j] = min(dp[j], dp[j-weight(i)]+1]
